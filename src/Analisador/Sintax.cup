/* Sintax.cup */

package Analisador;

import java_cup.runtime.Symbol;
import Clases.arbol;

parser code
{:
    

     public void syntax_error(Symbol s){
        System.out.println("Error sintactico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }

:}

terminal Program,End,Var,Arr,Console,Print,Column,Tipo,Cadena,Reservemenor,
OPA,
OPE,
G_tipo_grafica,G_titulo,G_label,G_ejex,G_ejey,G_titulox,G_tituloy,G_values,G_exec,
Igual,Suma,Coma,Resta,Multiplicacion,Division,Parentesis_a,Parentesis_c,Llave_a,Llave_c,Dos_puntos,Reserve,P_coma,Parent_a,Parent_c,Punto,C_dobles_a,
C_dobles_c,Arroba,Doble_puntos,Identificador,Numero,ERROR; 

non terminal arbol INICIO, CODIGO,COMPILACION,SENTENCIA,DECLRACION,TARRELGOS,CONTENIDO,TIPCONTENIDO,LISTA_VALORES,COMENT,EXP,CONT,FUNES,DATO,
COMENTARIO,CADENA,ARREGLOSTIP,GRAFIC,COMSENTENCIAS;

start with INICIO;

INICIO ::= Program:p CODIGO:c End:e Program:p1 
            {:
            arbol ini = new arbol("INICIO");
                    ini.addHijo(new arbol(p.toString())); 
                    ini.addHijo(c);
                    ini.addHijo(new arbol(e.toString())); 
                    ini.addHijo(new arbol(p1.toString())); 
                    RESULT = ini;
            :};
CODIGO ::= COMPILACION:c 
        {:
        arbol cod = new arbol("CODIGO");
                    cod.addHijo(c);
                    RESULT = cod;
        :}
        |      ;
COMPILACION ::= SENTENCIA:s 
            {:
            arbol com = new arbol("COMPILACION");
                    com.addHijo(s);
                    RESULT = com;
            :}
            |  COMPILACION:c SENTENCIA:s 
              {:
              arbol com = new arbol("COMPILACION");
                    com.addHijo(c);
                    com.addHijo(s);
                    RESULT = com;
                :};

SENTENCIA ::=  DECLRACION:d 
                {:arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(d);
                    RESULT = sen;:}
                |  TARRELGOS:t 
                {:arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(t);
                    RESULT = sen;:}
                | COMENT:c
                 {:arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(c);
                    RESULT = sen;:}
                | GRAFIC:g {:arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(g);
                    RESULT = sen;:};


//----------------DECLARACION DE VARIABLEN--------------------------------------------------------------------------

DECLRACION ::= Var:v Dos_puntos Tipo:t Doble_puntos Identificador:i Reserve TIPCONTENIDO:N End P_coma  
                {:  arbol Deca = new arbol("DECLRACION");
                    Deca.addHijo(new arbol(v.toString())); 
                    Deca.addHijo(new arbol(t.toString())); 
                    Deca.addHijo(new arbol(i.toString())); 
                    Deca.addHijo(N);
                    RESULT = Deca; :};



            

TIPCONTENIDO ::= Identificador:i 
                        {:
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(i.toString())); 
                    RESULT = l;
            :}
            | Numero:n  
            {:
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(n.toString())); 
                    RESULT = l;
            :}
            | Cadena:c
            {:
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(c.toString())); 
                    RESULT = l;
            :}
            | Arroba:ar Identificador:i
            {:
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(ar.toString())); 
                    l.addHijo(new arbol(i.toString())); 
                    RESULT = l;
            :}
            | OPA:op2 Parentesis_a TIPCONTENIDO:c Coma TIPCONTENIDO:c1 Parentesis_c
            {:
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(op2.toString())); 
                    l.addHijo(c);
                    l.addHijo(c1);
                    RESULT = l;
            :}
            | OPE:op1 Parentesis_a FUNES:f Parentesis_c
            {:
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(op1.toString())); 
                    l.addHijo(f);
                    RESULT = l;
            :}
             ; 


                
//----------------DECLARACION DE ARREGLO--------------------------------------------------------------------------

TARRELGOS ::= Arr:a Dos_puntos Tipo:t Doble_puntos Arroba:ar Identificador:i Reserve Parent_a LISTA_VALORES:li Parent_c End P_coma 
            {:
            arbol l = new arbol("TARRELGOS");
                    l.addHijo(new arbol(a.toString())); 
                    l.addHijo(new arbol(t.toString())); 
                    l.addHijo(new arbol(ar.toString())); 
                    l.addHijo(new arbol(i.toString())); 
                    l.addHijo(li);
                    RESULT = l;

            :};

LISTA_VALORES ::= LISTA_VALORES:li Coma TIPCONTENIDO:tip
                {:
                    arbol l = new arbol("LISTA_VALORES");
                    l.addHijo(li);
                    l.addHijo(tip);
                    RESULT = l;
                :}
                
                 | TIPCONTENIDO:tip   
                {:
    arbol l = new arbol("LISTA_VALORES");
                    l.addHijo(tip);
                    RESULT = l;
                    
                :}

                ;
                 



//----------------DECLARACION DE ESTADISTICAS --------------------------------------------------------------------------



FUNES ::= Parent_a  DATO:d  Parent_c 
        {:arbol l = new arbol("FUNES");
                l.addHijo(d);
                RESULT = l;:}
        | DATO:d 
        {:
    arbol l = new arbol("FUNES");
                    l.addHijo(d);
                    RESULT = l;
        :};

DATO ::= DATO:d Coma TIPCONTENIDO:tip
        {:
                arbol l = new arbol("DATO");
                l.addHijo(d);
                l.addHijo(tip);
                RESULT = l;
        :}
        | TIPCONTENIDO:t 
        {:
        arbol l = new arbol("DATO");
                l.addHijo(t);
                RESULT = l;
        :}; 


//----------------DECLARACION DE IMPRESION EN CONSOLA --------------------------------------------------------------------------

COMENT ::= Console:c Doble_puntos COMENTARIO:com 
            {:
            arbol l = new arbol("COMENT");
                l.addHijo(new arbol(c.toString())); 
                l.addHijo(com);
                RESULT = l;
            :};

COMENTARIO ::= Print:p Igual EXP:e End P_coma 
            {:
            arbol l = new arbol("COMENTARIO");
                l.addHijo(new arbol(p.toString())); 
                l.addHijo(e);
                RESULT = l;
            :}
        | Column:cl Igual CADENA:c Reservemenor ARREGLOSTIP:a End P_coma
            {:
            arbol l = new arbol("COMENTARIO");
                l.addHijo(new arbol(cl.toString())); 
                l.addHijo(c);
                l.addHijo(a);
                RESULT = l;
            :};

ARREGLOSTIP ::= LISTA_VALORES:lv 
            {:
            arbol l = new arbol("ARREGLOSTIP");
                l.addHijo(lv);
                RESULT = l;
            :}
            | Parent_a LISTA_VALORES:lv Parent_c 
            {:
            arbol l = new arbol("ARREGLOSTIP");
                l.addHijo(lv);
                RESULT = l;
            :};
       

CADENA ::= Cadena:c
        {:arbol l = new arbol("CADENA");
                l.addHijo(new arbol(c.toString())); 
                RESULT = l;:}
        | Identificador:i {:
        arbol l = new arbol("CADENA");
                l.addHijo(new arbol(i.toString())); 
                RESULT = l;
        :};

EXP ::= EXP Coma CONT:co {:
            arbol l = new arbol("EXP");
                l.addHijo(co);
                RESULT = l;
            :}
        | CONT:co
        {:
        arbol l = new arbol("EXP");
                l.addHijo(co);
                RESULT = l;
        :};

CONT ::= TIPCONTENIDO:TIp
       {:
        arbol l = new arbol("CONT");
                l.addHijo(TIp);
                RESULT = l;
        :};


//----------------DECLARACION DE  FUNCIONES DE GRAFICACION --------------------------------------------------------------------------


GRAFIC ::= G_tipo_grafica:G Parentesis_a COMSENTENCIAS:C G_exec G_tipo_grafica End P_coma Parentesis_c End P_coma 
                {:
                arbol l = new arbol("GRAFIC");
                l.addHijo(new arbol(G.toString()));
                l.addHijo(C);
                RESULT = l;
                :}; 

//graphbar or graphLine
COMSENTENCIAS ::= G_titulo:GT Doble_puntos Tipo:t1 Igual Cadena:titu End P_coma
                  G_ejex:GX Doble_puntos Tipo:t2 Igual Parent_a LISTA_VALORES:ejx Parent_c End P_coma
                  G_ejey:GY Doble_puntos Tipo:t3 Igual Parent_a LISTA_VALORES:ejy Parent_c End P_coma
                  G_titulox:GTIX Doble_puntos Tipo:t4 Igual Cadena:titux End P_coma
                  G_tituloy:GTIY Doble_puntos Tipo:t5 Igual Cadena:tituy End P_coma
                  {:
                  arbol l = new arbol("COMSENTENCIAS");
                  l.addHijo(new arbol(GT.toString()));
                  l.addHijo(new arbol(t1.toString())); 
                  l.addHijo(new arbol(titu.toString()));

                  l.addHijo(new arbol(GX.toString()));
                  l.addHijo(new arbol(t2.toString()));
                  l.addHijo(ejx);

                  l.addHijo(new arbol(GY.toString()));
                  l.addHijo(new arbol(t3.toString()));
                  l.addHijo(ejy);

                  l.addHijo(new arbol(GTIX.toString())); 
                  l.addHijo(new arbol(t4.toString()));
                  l.addHijo(new arbol(titux.toString())); 

                  l.addHijo(new arbol(GTIY.toString()));  
                  l.addHijo(new arbol(t5.toString()));
                  l.addHijo(new arbol(tituy.toString()));
                   
                  
                   
                    
                  RESULT = l;
                    :}
//graphpie
                  | G_label:lab Doble_puntos Tipo:t1 Igual Parent_a LISTA_VALORES:PILC Parent_c End P_coma
                    G_values:value Doble_puntos Tipo:t2 Igual Parent_a LISTA_VALORES:PILD Parent_c End P_coma
                    G_titulo:titu Doble_puntos Tipo:t3 Igual Cadena:c End P_coma 
                    {:
                    arbol l = new arbol("COMSENTENCIAS");
                    l.addHijo(new arbol(lab.toString()));
                    
                    l.addHijo(PILC);

                    l.addHijo(new arbol(value.toString()));
                    l.addHijo(new arbol(t2.toString()));
                    l.addHijo(PILD);

                    l.addHijo(new arbol(titu.toString()));
                    l.addHijo(new arbol(t3.toString()));
                    l.addHijo(new arbol(c.toString()));
                    
                    
                    
                    RESULT = l;
                    :}
//histrogram
                  |G_titulo:titu Doble_puntos Tipo:t1 Igual Cadena:c End P_coma
                   G_values:value Doble_puntos Tipo:t2 Igual Parent_a LISTA_VALORES:A Parent_c End P_coma

                    {:
                        arbol l = new arbol("COMSENTENCIAS");
                        l.addHijo(new arbol(titu.toString()));
                        l.addHijo(new arbol(t1.toString()));
                        l.addHijo(new arbol(c.toString()));

                        l.addHijo(new arbol(value.toString()));
                        l.addHijo(new arbol(t2.toString()));
                        l.addHijo(A);
                        
                        
                        
                        RESULT = l;
                    :};










