// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analisador/LexerCup.flex

/*
 * Desarrollado por José Luis Espinoza Jolón
 * jespinozajolon@gmail.com
 * Enero - 2024
 */
package Analisador;
import java_cup.runtime.Symbol;
import Clases.Errores;
import Clases.Tokens_L;
import java.util.ArrayList;
import java.util.List;


@SuppressWarnings("fallthrough")
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\5\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\12\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\0\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\33\1\40\1\41\1\42"+
    "\1\43\1\44\1\33\1\45\1\46\1\47\1\50\1\51"+
    "\1\33\1\52\1\53\1\54\1\55\1\0\1\56\1\0"+
    "\1\33\1\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\33\1\40\1\41\1\42"+
    "\1\43\1\44\1\33\1\45\1\46\1\47\1\50\1\51"+
    "\1\33\1\52\1\53\1\54\1\57\1\0\1\60\7\0"+
    "\1\3\72\0\100\33\60\0\2\61\115\0\1\62\u019c\0"+
    "\1\63\1\64\12\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\16\20\1\21\1\22\1\23\1\24\1\1"+
    "\1\25\1\26\1\0\1\27\1\0\1\30\1\0\1\31"+
    "\1\0\1\32\5\20\1\0\5\20\1\0\6\20\1\0"+
    "\4\20\1\0\1\20\2\0\1\13\1\0\1\33\3\20"+
    "\1\34\1\20\1\34\1\20\1\35\3\20\1\0\1\20"+
    "\1\36\1\20\1\37\1\40\1\41\1\37\2\20\1\0"+
    "\2\42\1\43\1\20\1\0\1\20\1\44\1\43\1\2"+
    "\3\20\1\0\1\20\1\45\1\46\1\47\2\20\1\0"+
    "\2\20\1\0\1\50\2\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\3\20\1\0\1\51\2\52\1\53"+
    "\1\20\1\53\1\20\1\0\2\20\1\0\1\54\1\55"+
    "\1\20\1\0\1\54\4\20\1\0\1\20\1\0\1\20"+
    "\2\56\2\57\1\20\1\0\2\60\2\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\61\1\62\1\63\1\64\1\63"+
    "\1\64\1\20\1\0\1\65\1\20\1\0\2\66\1\20"+
    "\1\0\2\67\2\70\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\65\0\65"+
    "\0\65\0\65\0\u0109\0\65\0\65\0\u013e\0\u0173\0\65"+
    "\0\u01a8\0\65\0\65\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\65\0\65\0\65\0\65\0\u04c3\0\65\0\65"+
    "\0\324\0\65\0\u04f8\0\65\0\u052d\0\65\0\u0562\0\65"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a"+
    "\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u052d\0\u0b2e\0\u0212\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0212\0\u0c02\0\65\0\u0c37\0\u0212\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0212\0\u0d75\0\u0212\0\u0daa\0\u0212"+
    "\0\65\0\u0ddf\0\u0e14\0\u0e49\0\u0212\0\65\0\u0212\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\65\0\65\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u0212\0\u0212\0\u0212\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u0212\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\u0212\0\u14e9\0\u151e\0\u0212"+
    "\0\u1553\0\65\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\65"+
    "\0\u0212\0\u1691\0\u16c6\0\u0212\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u0212\0\65"+
    "\0\u190d\0\u1942\0\u0212\0\65\0\u1977\0\u19ac\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\u1ab5\0\u0212\0\65\0\u0212\0\u0212\0\u0212"+
    "\0\65\0\65\0\u1aea\0\u1b1f\0\u0212\0\u1b54\0\u1b89\0\u0212"+
    "\0\65\0\u1bbe\0\u1bf3\0\u0212\0\65\0\u0212\0\65\0\u0212"+
    "\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\25\1\31\1\32\2\25\1\33\1\34"+
    "\2\25\1\35\1\36\1\37\1\40\1\25\1\41\3\25"+
    "\1\42\1\43\1\44\1\45\1\2\1\46\1\47\1\50"+
    "\66\0\2\3\1\0\1\3\60\0\2\4\2\0\61\4"+
    "\4\0\1\51\1\0\1\52\5\0\1\51\2\0\1\53"+
    "\1\51\5\0\27\51\34\0\1\54\55\0\1\55\1\0"+
    "\1\16\65\0\1\56\51\0\1\57\6\0\1\60\67\0"+
    "\1\25\6\0\17\25\1\61\7\25\27\0\1\25\6\0"+
    "\27\25\27\0\1\25\6\0\7\25\1\62\5\25\1\63"+
    "\11\25\27\0\1\25\6\0\10\25\1\64\4\25\1\65"+
    "\11\25\4\0\1\66\22\0\1\25\6\0\11\25\1\67"+
    "\2\25\1\70\7\25\1\71\2\25\27\0\1\25\6\0"+
    "\17\25\1\72\7\25\27\0\1\25\6\0\10\25\1\73"+
    "\16\25\4\0\1\74\22\0\1\25\6\0\1\75\26\25"+
    "\27\0\1\25\6\0\1\76\3\25\1\77\3\25\1\100"+
    "\4\25\1\101\4\25\1\102\4\25\4\0\1\103\22\0"+
    "\1\25\6\0\17\25\1\104\7\25\27\0\1\25\6\0"+
    "\4\25\1\105\22\25\27\0\1\25\6\0\22\25\1\106"+
    "\4\25\27\0\1\25\6\0\10\25\1\107\16\25\4\0"+
    "\1\110\22\0\1\25\6\0\1\111\26\25\60\0\1\112"+
    "\20\0\1\51\1\0\1\52\5\0\1\51\1\113\1\0"+
    "\1\53\1\51\5\0\27\51\27\0\1\114\45\0\5\57"+
    "\1\115\57\57\17\0\1\25\6\0\17\25\1\116\7\25"+
    "\27\0\1\25\6\0\1\117\26\25\27\0\1\25\6\0"+
    "\12\25\1\120\1\25\1\121\12\25\27\0\1\25\6\0"+
    "\23\25\1\122\3\25\27\0\1\25\6\0\22\25\1\123"+
    "\4\25\61\0\1\124\32\0\1\25\6\0\4\25\1\125"+
    "\22\25\27\0\1\25\6\0\3\25\1\126\23\25\27\0"+
    "\1\25\6\0\4\25\1\127\22\25\27\0\1\25\6\0"+
    "\1\130\26\25\27\0\1\25\6\0\20\25\1\131\6\25"+
    "\5\0\1\132\50\0\1\132\13\0\1\132\21\0\1\25"+
    "\6\0\1\25\1\133\25\25\27\0\1\25\6\0\24\25"+
    "\1\134\2\25\27\0\1\25\6\0\3\25\1\135\23\25"+
    "\27\0\1\25\6\0\14\25\1\136\12\25\27\0\1\25"+
    "\6\0\3\25\1\137\23\25\27\0\1\25\6\0\12\25"+
    "\1\140\14\25\52\0\1\141\41\0\1\25\6\0\10\25"+
    "\1\142\4\25\1\143\11\25\4\0\1\144\22\0\1\25"+
    "\6\0\20\25\1\145\6\25\5\0\1\146\21\0\1\25"+
    "\6\0\13\25\1\147\13\25\27\0\1\25\6\0\21\25"+
    "\1\150\5\25\57\0\1\151\34\0\1\25\6\0\12\25"+
    "\1\152\4\25\1\153\7\25\51\0\1\154\42\0\1\51"+
    "\45\0\5\57\1\115\16\57\1\155\40\57\17\0\1\25"+
    "\6\0\17\25\1\156\7\25\27\0\1\25\6\0\22\25"+
    "\1\157\4\25\27\0\1\25\6\0\20\25\1\160\6\25"+
    "\5\0\1\161\21\0\1\25\6\0\1\25\1\162\25\25"+
    "\27\0\1\25\6\0\24\25\1\163\1\164\1\25\27\0"+
    "\1\25\6\0\2\25\1\165\24\25\27\0\1\25\6\0"+
    "\16\25\1\166\10\25\27\0\1\25\6\0\21\25\1\167"+
    "\5\25\57\0\1\170\34\0\1\25\6\0\4\25\1\171"+
    "\22\25\27\0\1\25\6\0\10\25\1\172\16\25\4\0"+
    "\1\173\22\0\1\25\6\0\1\174\26\25\27\0\1\25"+
    "\6\0\14\25\1\175\12\25\27\0\1\25\6\0\6\25"+
    "\1\176\20\25\52\0\1\177\41\0\1\25\6\0\22\25"+
    "\1\200\4\25\60\0\1\201\33\0\1\25\6\0\22\25"+
    "\1\202\4\25\27\0\1\25\6\0\10\25\1\203\16\25"+
    "\4\0\1\204\22\0\1\25\6\0\27\25\1\205\26\0"+
    "\1\25\6\0\13\25\1\206\13\25\27\0\1\25\6\0"+
    "\15\25\1\207\11\25\53\0\1\210\40\0\1\25\6\0"+
    "\12\25\1\211\14\25\27\0\1\25\6\0\7\25\1\212"+
    "\17\25\27\0\1\25\6\0\15\25\1\213\11\25\53\0"+
    "\1\214\40\0\1\25\6\0\12\25\1\215\14\25\27\0"+
    "\1\25\6\0\1\216\26\25\36\0\1\217\55\0\1\25"+
    "\6\0\21\25\1\220\5\25\27\0\1\25\6\0\17\25"+
    "\1\221\7\25\57\0\1\222\34\0\1\25\6\0\12\25"+
    "\1\223\14\25\50\0\1\224\43\0\1\25\6\0\4\25"+
    "\1\225\22\25\27\0\1\25\6\0\1\226\26\25\36\0"+
    "\1\227\114\0\1\230\25\0\1\25\6\0\14\25\1\231"+
    "\12\25\27\0\1\25\6\0\12\25\1\232\14\25\50\0"+
    "\1\233\43\0\1\25\6\0\4\25\1\234\22\25\27\0"+
    "\1\25\6\0\1\25\1\235\10\25\1\236\3\25\1\237"+
    "\10\25\27\0\1\25\6\0\6\25\1\240\20\25\44\0"+
    "\1\241\47\0\1\25\6\0\14\25\1\242\12\25\52\0"+
    "\1\243\41\0\1\25\6\0\1\244\26\25\27\0\1\25"+
    "\6\0\15\25\1\245\11\25\53\0\1\246\40\0\1\25"+
    "\6\0\20\25\1\247\6\25\5\0\1\250\21\0\1\25"+
    "\6\0\14\25\1\251\12\25\52\0\1\252\41\0\1\25"+
    "\6\0\4\25\1\253\22\25\42\0\1\254\51\0\1\25"+
    "\6\0\1\255\26\25\27\0\1\25\6\0\10\25\1\256"+
    "\16\25\4\0\1\257\22\0\1\25\6\0\10\25\1\260"+
    "\16\25\4\0\1\261\22\0\1\25\6\0\17\25\1\262"+
    "\7\25\55\0\1\263\36\0\1\25\6\0\1\264\26\25"+
    "\36\0\1\265\55\0\1\25\6\0\13\25\1\266\13\25"+
    "\27\0\1\25\6\0\24\25\1\267\1\270\1\25\62\0"+
    "\1\271\1\272\30\0\1\25\6\0\26\25\1\273\64\0"+
    "\1\274\27\0\1\25\6\0\17\25\1\275\7\25\27\0"+
    "\1\25\6\0\14\25\1\276\12\25\52\0\1\277\41\0"+
    "\1\25\6\0\4\25\1\300\22\25\42\0\1\301\51\0"+
    "\1\25\6\0\1\302\26\25\36\0\1\303\55\0\1\25"+
    "\6\0\1\304\26\25\36\0\1\305\55\0\1\25\6\0"+
    "\4\25\1\306\22\25\42\0\1\307\51\0\1\25\6\0"+
    "\13\25\1\310\13\25\51\0\1\311\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7208];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\5\11\1\1\2\11\2\1\1\11"+
    "\1\1\2\11\16\1\4\11\1\1\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\1\1\0"+
    "\5\1\1\0\6\1\1\0\4\1\1\0\1\1\2\0"+
    "\1\1\1\0\6\1\1\11\5\1\1\0\6\1\1\11"+
    "\2\1\1\0\1\1\1\11\2\1\1\0\2\1\2\11"+
    "\3\1\1\0\6\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\2\0\2\1\1\0\3\1\1\0"+
    "\5\1\1\11\1\1\1\0\2\1\1\0\1\11\2\1"+
    "\1\0\5\1\1\0\1\1\1\0\4\1\1\11\1\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\3\1\2\11\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public static List<Errores> lista_E =  new ArrayList<>();
    public static List<Tokens_L> lista_T =  new ArrayList<>();

    
    Tokens_L tokens_L;
    Errores error;
    int conteo_errores = 1;
    int conteo_tokens = 1;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Este es un error lexico: "+ yytext() +
    ", en la linea: "+yyline+", en la columna: "+yychar); error = new Errores(conteo_errores, "Lexico", "El caracter " + yytext()+ " no pertenece al lenguaje",yyline,yycolumn);
                            lista_E.add(error);
                            conteo_errores++;
            }
          // fall through
          case 58: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 59: break;
          case 3:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "ParentA",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Parentesis_a, yyline, yycolumn, yytext());
            }
          // fall through
          case 60: break;
          case 4:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "ParentC",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Parentesis_c, yyline, yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 5:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "multi",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Multiplicacion, yyline, yycolumn, yytext());
            }
          // fall through
          case 62: break;
          case 6:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "mas",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Suma, yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 7:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "coma",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Coma, yyline, yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 8:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "menos",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Resta, yyline, yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 9:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Punto",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Punto, yyline, yycolumn, yytext());
            }
          // fall through
          case 66: break;
          case 10:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "div",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Division, yyline, yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 11:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Numero",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Numero, yyline, yycolumn, yytext());
            }
          // fall through
          case 68: break;
          case 12:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "dos_puntos",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Dos_puntos, yyline, yycolumn, yytext());
            }
          // fall through
          case 69: break;
          case 13:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Punto_com",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.P_coma, yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 14:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "igual",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Igual, yyline, yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 15:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Arroba",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Arroba, yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 16:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "String",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Identificador, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 17:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "ParentA",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Parent_a, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 18:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "ParentC",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Parent_c, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 19:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "llaveA",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Llave_a, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 20:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "llaveC",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Llave_c, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 21:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "CDobles",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.C_dobles_a, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 22:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "CDobles",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.C_dobles_c, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 23:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "cadena",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Cadena, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 24:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Reserv",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Reservemenor, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 25:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Doble_puntos",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Doble_puntos, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 26:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Reserv",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Reserve, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 27:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Arreglo",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Arr, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 28:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_D",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPA, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 29:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Reservada",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.End, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 30:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_max",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 31:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_min",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 32:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_mod",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPA, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 33:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_M",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPA, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 34:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_R",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPA, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 35:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_S",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPA, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 36:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Reservada",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Var, yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 37:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Gejex",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_ejex, yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 38:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Gejey",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_ejey, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 39:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Gexec",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_exec, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 40:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_moda",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 41:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "label",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_label, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 42:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_media",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 43:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "imprimir",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Print, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 44:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Tipos",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Tipo, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 45:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "column",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Column, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 46:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "titulo",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_titulo, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 47:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Gvalues",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_values, yyline, yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 48:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Imprimir",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Console, yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 49:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_mediana",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 50:
            { System.out.println("Inicio: "+ yytext() +
    ", en la linea: "+yyline+", en la columna: "+yycolumn); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Reservada",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.Program, yyline, yycolumn, yytext());
            }
          // fall through
          case 107: break;
          case 51:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Gtitulox",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_titulox, yyline, yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 52:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Gtituiloy",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_tituloy, yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 53:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "graBar",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_tipo_grafica, yyline, yycolumn, yytext());
            }
          // fall through
          case 110: break;
          case 54:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_g",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_tipo_grafica, yyline, yycolumn, yytext());
            }
          // fall through
          case 111: break;
          case 55:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Estadistico_varianza",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.OPE, yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 56:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Gline",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_tipo_grafica, yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 57:
            { System.out.println("Encontrado "+ yytext()); tokens_L = new Tokens_L(conteo_tokens, yytext(), "Ghisto",yyline,yycolumn);
                            lista_T.add(tokens_L);
                            conteo_tokens++;
        return new Symbol(sym.G_tipo_grafica, yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
