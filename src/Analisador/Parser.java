
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisador;

import java_cup.runtime.Symbol;
import Clases.arbol;
import Clases.Errores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\013\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\004\000\002\011" +
    "\010\000\002\011\006\000\002\007\014\000\002\012\005" +
    "\000\002\012\003\000\002\016\005\000\002\016\003\000" +
    "\002\013\005\000\002\020\007\000\002\020\011\000\002" +
    "\022\003\000\002\022\005\000\002\023\014\000\002\024" +
    "\004\000\002\024\003\000\002\025\011\000\002\025\011" +
    "\000\002\025\011\000\002\025\011\000\002\025\011\000" +
    "\002\025\011\000\002\025\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\004\004\001\002\000\014\005\ufffe\006" +
    "\021\007\012\010\007\020\010\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\054\170\001" +
    "\002\000\004\037\074\001\002\000\014\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\020\ufff8\001\002\000\004\043\063\001" +
    "\002\000\004\005\061\001\002\000\014\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\020\ufffd\001\002\000\014\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\020\ufff9\001\002\000\014\005\uffff" +
    "\006\021\007\012\010\007\020\010\001\002\000\014\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\020\ufffa\001\002\000\014" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\020\ufffb\001\002\000" +
    "\004\043\022\001\002\000\004\013\023\001\002\000\004" +
    "\054\024\001\002\000\004\055\025\001\002\000\004\044" +
    "\026\001\002\000\016\014\035\016\034\017\031\053\033" +
    "\055\032\056\030\001\002\000\004\005\056\001\002\000" +
    "\014\005\ufff5\015\ufff5\033\ufff5\040\ufff5\047\ufff5\001\002" +
    "\000\004\037\044\001\002\000\014\005\ufff6\015\ufff6\033" +
    "\ufff6\040\ufff6\047\ufff6\001\002\000\004\055\043\001\002" +
    "\000\004\037\036\001\002\000\014\005\ufff4\015\ufff4\033" +
    "\ufff4\040\ufff4\047\ufff4\001\002\000\016\014\035\016\034" +
    "\017\031\053\033\055\032\056\030\001\002\000\004\033" +
    "\040\001\002\000\016\014\035\016\034\017\031\053\033" +
    "\055\032\056\030\001\002\000\004\040\042\001\002\000" +
    "\014\005\ufff2\015\ufff2\033\ufff2\040\ufff2\047\ufff2\001\002" +
    "\000\014\005\ufff3\015\ufff3\033\ufff3\040\ufff3\047\ufff3\001" +
    "\002\000\020\014\035\016\034\017\031\046\050\053\033" +
    "\055\032\056\030\001\002\000\004\040\055\001\002\000" +
    "\014\005\uffee\015\uffee\033\uffee\040\uffee\047\uffee\001\002" +
    "\000\010\005\uffec\033\053\040\uffec\001\002\000\016\014" +
    "\035\016\034\017\031\053\033\055\032\056\030\001\002" +
    "\000\006\033\053\047\052\001\002\000\006\005\uffed\040" +
    "\uffed\001\002\000\016\014\035\016\034\017\031\053\033" +
    "\055\032\056\030\001\002\000\014\005\uffef\015\uffef\033" +
    "\uffef\040\uffef\047\uffef\001\002\000\014\005\ufff1\015\ufff1" +
    "\033\ufff1\040\ufff1\047\ufff1\001\002\000\004\045\057\001" +
    "\002\000\014\005\ufff7\006\ufff7\007\ufff7\010\ufff7\020\ufff7" +
    "\001\002\000\014\005\ufffc\006\ufffc\007\ufffc\010\ufffc\020" +
    "\ufffc\001\002\000\004\004\062\001\002\000\004\002\000" +
    "\001\002\000\004\013\064\001\002\000\004\054\065\001" +
    "\002\000\004\053\066\001\002\000\004\055\067\001\002" +
    "\000\004\044\070\001\002\000\020\014\035\016\034\017" +
    "\031\046\050\053\033\055\032\056\030\001\002\000\004" +
    "\005\072\001\002\000\004\045\073\001\002\000\014\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\020\ufff0\001\002\000\020" +
    "\021\075\022\076\023\102\024\100\025\105\026\104\027" +
    "\103\001\002\000\004\054\162\001\002\000\004\054\154" +
    "\001\002\000\022\021\075\022\076\023\102\024\100\025" +
    "\105\026\104\027\103\030\144\001\002\000\004\054\136" +
    "\001\002\000\022\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\001\002\000\004\054\130" +
    "\001\002\000\004\054\122\001\002\000\004\054\114\001" +
    "\002\000\004\054\106\001\002\000\004\013\107\001\002" +
    "\000\004\031\110\001\002\000\004\014\111\001\002\000" +
    "\004\005\112\001\002\000\004\045\113\001\002\000\022" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\001\002\000\004\013\115\001\002\000\004" +
    "\031\116\001\002\000\004\014\117\001\002\000\004\005" +
    "\120\001\002\000\004\045\121\001\002\000\022\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\001\002\000\004\013\123\001\002\000\004\031\124" +
    "\001\002\000\020\014\035\016\034\017\031\046\050\053" +
    "\033\055\032\056\030\001\002\000\004\005\126\001\002" +
    "\000\004\045\127\001\002\000\022\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002" +
    "\000\004\013\131\001\002\000\004\031\132\001\002\000" +
    "\020\014\035\016\034\017\031\046\050\053\033\055\032" +
    "\056\030\001\002\000\004\005\134\001\002\000\004\045" +
    "\135\001\002\000\022\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\001\002\000\004\013" +
    "\137\001\002\000\004\031\140\001\002\000\020\014\035" +
    "\016\034\017\031\046\050\053\033\055\032\056\030\001" +
    "\002\000\004\005\142\001\002\000\004\045\143\001\002" +
    "\000\022\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\001\002\000\004\020\146\001\002" +
    "\000\022\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\001\002\000\004\005\147\001\002" +
    "\000\004\045\150\001\002\000\004\040\151\001\002\000" +
    "\004\005\152\001\002\000\004\045\153\001\002\000\014" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\020\uffe6\001\002\000" +
    "\004\013\155\001\002\000\004\031\156\001\002\000\020" +
    "\014\035\016\034\017\031\046\050\053\033\055\032\056" +
    "\030\001\002\000\004\005\160\001\002\000\004\045\161" +
    "\001\002\000\022\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\001\002\000\004\013\163" +
    "\001\002\000\004\031\164\001\002\000\004\014\165\001" +
    "\002\000\004\005\166\001\002\000\004\045\167\001\002" +
    "\000\022\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\001\002\000\006\011\173\012\171" +
    "\001\002\000\004\031\200\001\002\000\014\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\020\uffeb\001\002\000\004\031\174" +
    "\001\002\000\016\014\035\016\034\017\031\053\033\055" +
    "\032\056\030\001\002\000\006\005\176\033\053\001\002" +
    "\000\004\045\177\001\002\000\014\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\020\uffea\001\002\000\016\014\035\016\034" +
    "\017\031\053\033\055\032\056\030\001\002\000\006\015" +
    "\202\033\053\001\002\000\020\014\035\016\034\017\031" +
    "\046\205\053\033\055\032\056\030\001\002\000\004\005" +
    "\210\001\002\000\006\005\uffe8\033\053\001\002\000\016" +
    "\014\035\016\034\017\031\053\033\055\032\056\030\001" +
    "\002\000\006\033\053\047\207\001\002\000\004\005\uffe7" +
    "\001\002\000\004\045\211\001\002\000\014\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\020\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\002\004\001\001\000\020\003\012\004" +
    "\015\005\013\006\017\007\016\013\014\023\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\057\006\017\007\016\013\014\023\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\036\001" +
    "\001\000\002\001\001\000\004\011\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\045\012\046\016\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\045\012\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\045\012\046\016\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\076\025\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\045\012\046\016\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\045" +
    "\012\046\016\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\045\012\046\016\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\045\012\046\016\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\045" +
    "\012\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\045\012\200\001\001\000\002" +
    "\001\001\000\010\011\045\012\203\022\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\045\012\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static List<Errores> lista_S =  new ArrayList<>();


    
    
    Errores error;
    int conteo_errores = 1;

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: "+s.value+" linea: "+s.left+" columna: "+s.right);
        error = new Errores(conteo_errores, "Sintactico", "El caracter " + s.value+ " no pertenece a la estructura",s.left,s.right);
                            lista_S.add(error);
                            conteo_errores++;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program CODIGO End Program 
            {
              arbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol c = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol ini = new arbol("INICIO");
                    ini.addHijo(new arbol(p.toString())); 
                    ini.addHijo(c);
                    ini.addHijo(new arbol(e.toString())); 
                    ini.addHijo(new arbol(p1.toString())); 
                    RESULT = ini;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= COMPILACION 
            {
              arbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol c = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        arbol cod = new arbol("CODIGO");
                    cod.addHijo(c);
                    RESULT = cod;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= 
            {
              arbol RESULT =null;
		arbol cod = new arbol("CODIGO");
                RESULT = cod;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMPILACION ::= SENTENCIA 
            {
              arbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol s = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol com = new arbol("COMPILACION");
                    com.addHijo(s);
                    RESULT = com;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPILACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMPILACION ::= COMPILACION SENTENCIA 
            {
              arbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol c = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol s = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              arbol com = new arbol("COMPILACION");
                    com.addHijo(c);
                    com.addHijo(s);
                    RESULT = com;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPILACION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLRACION 
            {
              arbol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol d = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(d);
                    RESULT = sen;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= TARRELGOS 
            {
              arbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol t = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(t);
                    RESULT = sen;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= COMENT 
            {
              arbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol c = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(c);
                    RESULT = sen;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= GRAFIC 
            {
              arbol RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol g = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		arbol sen = new arbol("SENTENCIA");
                    sen.addHijo(g);
                    RESULT = sen;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLRACION ::= Var Dos_puntos Tipo Doble_puntos Identificador Reserve TIPCONTENIDO End P_coma 
            {
              arbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol N = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  arbol Deca = new arbol("DECLRACION",0,0);
                    Deca.addHijo(new arbol(v.toString(),vleft,vright)); 
                    Deca.addHijo(new arbol(t.toString(),tleft,tright)); 
                    Deca.addHijo(new arbol(i.toString(),ileft,iright)); 
                    Deca.addHijo(N);
                    RESULT = Deca; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLRACION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPCONTENIDO ::= Identificador 
            {
              arbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(i.toString())); 
                    RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPCONTENIDO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPCONTENIDO ::= Numero 
            {
              arbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(n.toString())); 
                    RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPCONTENIDO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPCONTENIDO ::= Cadena 
            {
              arbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(c.toString())); 
                    RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPCONTENIDO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPCONTENIDO ::= Arroba Identificador 
            {
              arbol RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(ar.toString())); 
                    l.addHijo(new arbol(i.toString())); 
                    RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPCONTENIDO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPCONTENIDO ::= OPA Parentesis_a TIPCONTENIDO Coma TIPCONTENIDO Parentesis_c 
            {
              arbol RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol c = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol c1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(op2.toString())); 
                    l.addHijo(c);
                    l.addHijo(c1);
                    RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPCONTENIDO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPCONTENIDO ::= OPE Parentesis_a FUNES Parentesis_c 
            {
              arbol RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pacleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pacright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pac = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol f = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pac1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pac1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pac1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol l = new arbol("TIPCONTENIDO");
                    l.addHijo(new arbol(op1.toString())); 
                    l.addHijo(new arbol(pac.toString())); 
                    l.addHijo(f);
                    l.addHijo(new arbol(pac1.toString())); 
                    RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPCONTENIDO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TARRELGOS ::= Arr Dos_puntos Tipo Doble_puntos Arroba Identificador Reserve FUNES End P_coma 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol li = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            arbol larreglo = new arbol("TARRELGOS",0,0);
                    larreglo.addHijo(new arbol(a.toString(),aleft,aright)); 
                    larreglo.addHijo(new arbol(t.toString(),tleft,tright)); 
                    larreglo.addHijo(new arbol(ar.toString(),arleft,arright)); 
                    larreglo.addHijo(new arbol(i.toString(),ileft,iright)); 
                    larreglo.addHijo(li);
                    RESULT = larreglo;

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TARRELGOS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_VALORES ::= LISTA_VALORES Coma TIPCONTENIDO 
            {
              arbol RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol li = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol tip = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    arbol lv = new arbol("LISTA_VALORES");
                    lv.addHijo(li); 
                    lv.addHijo(new arbol(com.toString()));
                    lv.addHijo(tip);
                    RESULT = lv;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_VALORES ::= TIPCONTENIDO 
            {
              arbol RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol tip = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    arbol lv = new arbol("LISTA_VALORES");
                    lv.addHijo(tip);
                    RESULT = lv;
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNES ::= Parent_a LISTA_VALORES Parent_c 
            {
              arbol RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol d = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		arbol lfun = new arbol("FUNES");
                lfun.addHijo(new arbol(pa.toString()));
                lfun.addHijo(d);
                lfun.addHijo(new arbol(pc.toString()));
                RESULT = lfun;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNES ::= LISTA_VALORES 
            {
              arbol RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol d1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    arbol lfun = new arbol("FUNES");
                    lfun.addHijo(d1);
                    RESULT = lfun;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMENT ::= Console Doble_puntos COMENTARIO 
            {
              arbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol com = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol lcoment = new arbol("COMENT");
                lcoment.addHijo(new arbol(c.toString())); 
                lcoment.addHijo(com);
                RESULT = lcoment;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMENTARIO ::= Print Igual LISTA_VALORES End P_coma 
            {
              arbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol e = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            arbol lcomentario = new arbol("COMENTARIO");
                lcomentario.addHijo(new arbol(p.toString())); 
                lcomentario.addHijo(e);
                RESULT = lcomentario;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMENTARIO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMENTARIO ::= Column Igual LISTA_VALORES Reservemenor ARREGLOSTIP End P_coma 
            {
              arbol RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		arbol c = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            arbol lcomentario = new arbol("COMENTARIO");
                lcomentario.addHijo(new arbol(cl.toString())); 
                lcomentario.addHijo(c);
                lcomentario.addHijo(a);
                RESULT = lcomentario;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMENTARIO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARREGLOSTIP ::= LISTA_VALORES 
            {
              arbol RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol lv = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol larreglo = new arbol("ARREGLOSTIP");
                larreglo.addHijo(lv);
                RESULT = larreglo;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARREGLOSTIP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARREGLOSTIP ::= Parent_a LISTA_VALORES Parent_c 
            {
              arbol RESULT =null;
		int pca1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pca1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pca1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol lv = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pca2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pca2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pca2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol larreglo = new arbol("ARREGLOSTIP");
                larreglo.addHijo(new arbol(pca1.toString())); 
                larreglo.addHijo(lv);
                larreglo.addHijo(new arbol(pca2.toString())); 
                RESULT = larreglo;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARREGLOSTIP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GRAFIC ::= G_tipo_grafica Parentesis_a COMSENTENCIAS G_exec G_tipo_grafica End P_coma Parentesis_c End P_coma 
            {
              arbol RESULT =null;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		arbol C = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                arbol lgrafic = new arbol("GRAFIC");
                lgrafic.addHijo(new arbol(G.toString()));
                lgrafic.addHijo(C);
                RESULT = lgrafic;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GRAFIC",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMSENTENCIAS ::= COMSENTENCIAS ATRIBUGRAFIC 
            {
              arbol RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol com = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int atri1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atri1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol atri1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                arbol lconsentencias = new arbol("COMSENTENCIAS");
                    lconsentencias.addHijo(com);
                    lconsentencias.addHijo(atri1);
                    RESULT = lconsentencias;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMSENTENCIAS ::= ATRIBUGRAFIC 
            {
              arbol RESULT =null;
		int atri2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atri2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol atri2 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                arbol lconsentencias = new arbol("COMSENTENCIAS");
                    lconsentencias.addHijo(atri2);
                    RESULT = lconsentencias;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMSENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIBUGRAFIC ::= G_titulo Doble_puntos Tipo Igual Cadena End P_coma 
            {
              arbol RESULT =null;
		int GTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int GTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object GT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                arbol latributograf = new arbol("ATRIBUGRAFIC");
                    latributograf.addHijo(new arbol(GT.toString()));
                    latributograf.addHijo(new arbol(t7.toString())); 
                    latributograf.addHijo(new arbol(titu.toString()));
                    RESULT = latributograf;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUGRAFIC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUGRAFIC ::= G_ejex Doble_puntos Tipo Igual FUNES End P_coma 
            {
              arbol RESULT =null;
		int GXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int GXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object GX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ejxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol ejx = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    arbol latributograf = new arbol("ATRIBUGRAFIC");
                    latributograf.addHijo(new arbol(GX.toString()));
                    latributograf.addHijo(new arbol(t6.toString()));
                    latributograf.addHijo(ejx);
                    RESULT = latributograf;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUGRAFIC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUGRAFIC ::= G_ejey Doble_puntos Tipo Igual FUNES End P_coma 
            {
              arbol RESULT =null;
		int GYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int GYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object GY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ejyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol ejy = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    arbol latributograf = new arbol("ATRIBUGRAFIC");
                        latributograf.addHijo(new arbol(GY.toString()));
                        latributograf.addHijo(new arbol(t3.toString()));
                        latributograf.addHijo(ejy);
                        RESULT = latributograf;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUGRAFIC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUGRAFIC ::= G_titulox Doble_puntos Tipo Igual Cadena End P_coma 
            {
              arbol RESULT =null;
		int GTIXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int GTIXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object GTIX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titux = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    arbol latributograf = new arbol("ATRIBUGRAFIC");
                      latributograf.addHijo(new arbol(GTIX.toString())); 
                      latributograf.addHijo(new arbol(t4.toString()));
                      latributograf.addHijo(new arbol(titux.toString())); 
                      RESULT = latributograf;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUGRAFIC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRIBUGRAFIC ::= G_tituloy Doble_puntos Tipo Igual Cadena End P_coma 
            {
              arbol RESULT =null;
		int GTIYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int GTIYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object GTIY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tituy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    arbol latributograf = new arbol("ATRIBUGRAFIC");
                        latributograf.addHijo(new arbol(GTIY.toString()));  
                        latributograf.addHijo(new arbol(t5.toString()));
                        latributograf.addHijo(new arbol(tituy.toString()));
                        RESULT = latributograf;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUGRAFIC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIBUGRAFIC ::= G_label Doble_puntos Tipo Igual FUNES End P_coma 
            {
              arbol RESULT =null;
		int lableft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int labright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object lab = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int PILCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PILCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol PILC = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    arbol latributograf = new arbol("ATRIBUGRAFIC");
                        latributograf.addHijo(new arbol(lab.toString()));
                        latributograf.addHijo(new arbol(t1.toString()));
                        latributograf.addHijo(PILC);
                        RESULT = latributograf;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUGRAFIC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIBUGRAFIC ::= G_values Doble_puntos Tipo Igual FUNES End P_coma 
            {
              arbol RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int PILDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PILDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol PILD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    arbol latributograf = new arbol("ATRIBUGRAFIC");
                      latributograf.addHijo(new arbol(value.toString()));
                      latributograf.addHijo(new arbol(t2.toString()));
                      latributograf.addHijo(PILD);
                      RESULT = latributograf;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUGRAFIC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
